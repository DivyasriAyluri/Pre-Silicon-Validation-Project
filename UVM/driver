class afifo_driver extends uvm_driver#(afifo_sequence_item);
  `uvm_component_utils(afifo_driver)
  
  // Virtual Interface
  virtual interface_fifo vif;
  
  afifo_sequence_item item;
  afifo_sequence_item seq;
  
  // Class Constructor
  function new (string name, uvm_component parent);
    super.new(name, parent);
  endfunction : new

  
  task reset;
    vif.w_rst <= 0;
    vif.r_rst <= 0;
    wait(!vif.w_rst);
    $display("[ DRIVER ] **** RESET STARTED **");
    vif.w_en <= 0;
    vif.data_in <= 0;
    vif.r_en <= 0;
    vif.data_out <= 0;
   
    vif.w_rst <= 1'b1;
    vif.r_rst <= 1'b1;
    
    $display("[ DRIVER ] **** RESET ENDED **");
  endtask 
  
  // Build Phase
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    if(!uvm_config_db#(virtual interface_fifo)::get(this, "*", "VIF", vif))
     `uvm_error("NO_VIF",{"Virtual interface must be set for: ",get_full_name(),".vif"});
  endfunction: build_phase
  
  // Connect Phase
  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    `uvm_info("DRIVER_CLASS", "Connect Phase!", UVM_HIGH)
  endfunction: connect_phase
  
  // Run Phase
  virtual task run_phase (uvm_phase phase);
    super.run_phase(phase);
    `uvm_info("DRIVER_CLASS", "Inside Run Phase!", UVM_HIGH)
    
    forever begin
      item = afifo_sequence_item::type_id::create("item");
      seq = afifo_sequence_item::type_id::create("seq");
      drive(item);
    end
  endtask: run_phase

  
  // DRIVE
  task drive(afifo_sequence_item item);
    fork 
      for(int i=0; i<30; i++) begin
        @(posedge vif.clk iff !vif.full);
        vif.r_rst = item.r_rst;
        vif.w_rst = item.w_rst;
        vif.w_en = (i%1 == 0) ? 1'b1 : 1'b0;
        
        if ((vif.w_en)) begin
          seq_item_port.get_next_item(item);
          `uvm_info("DRIVER", $sformatf("Inputs data_in= %h", item.data_in), UVM_LOW)
          vif.data_in <= item.data_in;
          seq_item_port.item_done();
	  vif.verify_data_q.push_front(vif.data_in);
        end
    
      end
    join
  endtask : drive
endclass : afifo_driver

